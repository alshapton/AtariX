;
;            AtariX - a game by Andrew Shapton
;            (c) 2020
;

             processor 6502               ; the assembler is 6502, since this assembler
                                          ; can assemble code for many processors.

             include "vcs.h"

             include "macro.h"

;SYMBOL TABLE
WHITE        EQU $0E                  ; ccolour white
PLAYFIELD_B  EQU $FF                  ; Bottom of playfield
PLAYFIELD_L  EQU 16		      ; Left/Right side of playfield


ROCKET_TOP   EQU 80

; Scan Symbols

SCAN_LINES   EQU 192                  ; Number of scan Lines
BOTTOM_WIDTH EQU 30 		      ; Number of scan lines of the bottom of the playfield
OVERSCAN     EQU 30                   ; Value of overscan (bottom of screen)
             
; Shadow Registers as required:


CTRLPF_shadow = $82  ; a RAM location for CTRLPF shadow register




             SEG
             ORG $F000                ; memory address of start of code


Reset

;===============================   
; Initialising Memory ON STARTUP
;===============================

; * Clears all variables and stack
; * Initialises the stack pointer
; * Also clears the stack registers by "wrapping" the stack (unusual technique)
   
             ldx #0
             txa
Clear        dex
             txs
             pha
             bne Clear
            
;======================================
; End of Initialising Memory ON STARTUP
;======================================



StartOfFrame ; where frame drawing starts

	     include "StartOfFrame.asm" ; prepare to draw a frame
;           
;==========================================           
; Start of 37 scan lines 

	     ldx #37        ; This is the 37 scan lines at the top of the screen
vblankscan   sta WSYNC      ; Wait for the TIA to tell the 6502 that the scanline 
	     dex	    ; has complete and processing can start again.
             bne vblankscan

; +========================================+
; |               BEGIN KERNEL             |
; +========================================+

; 192 scanlines of picture..

;-------------------------------------
; Prep for base playfield

             lda #PLAYFIELD_L ; left hand byte of playfield
             sta PF0	      ; store in PF1 register
             
                      
             lda #$0E         ; make playfield colour white - NTSC - $0E
             sta COLUPF       ; store in playfield colour register
             lda #1           ; Reflect payfield
             sta CTRLPF
    	     sta CTRLPF_shadow          ; init CTRLPF shadow register as required

	        
	     ldx #203        ; X-register - number of scan lines
screenLoop  
             
             
             lda #PLAYFIELD_L 
             sta PF0

             dex
             ;sty COLUBK                    ; TIA Register for background colour
             sta WSYNC                      ; Scanline Sync (6502 - TIA - 6502 Off)
	     
             
             bne screenLoop
             
             
	     lda #PLAYFIELD_B; left hand byte of playfield (bottom)
             sta PF1         ; (dont forget - still using reflected playfield)
             sta PF2
	     sta PF0	

	     ldx #8          ; 8 lines to draw for the bottom of the screen                          
Bottom8Lines dex
             sta WSYNC
	     bne Bottom8Lines
	     
             
; prepare for next scan line
             lda #PLAYFIELD_L	     ; left hand byte of playfield
	     sta PF0		     ; place standard size of left side back in the PF register
             lda #0                  ; Blank out middle playfield
             sta PF2                 ; by zero-ing PF2
	     sta PF1                 ; and PF1
             
; +========================================+
; |               END KERNEL               |
; +========================================+

             lda #%0100001                  ; This is where the input ports are read
             sta VBLANK                     ; (and the scan beam switched off)
            
;==========================================

; 30 scanlines of overscan... - the bottom overscan (loop 30 times)
	     ldx #OVERSCAN
voverscan    sta WSYNC                      ; usual horizontal scan line sync
	     dex
             bne voverscan
            
;==========================================
             jmp StartOfFrame


             ORG $FFFA		 ; the 6502 looks at the address $FFFA to determine
                                 ; the address that it should start running code.
                                 ; therefore the 3 labels below (Reset is a label 
                                 ; which equals $F000, the execution will start there
            
            .word Reset          ; NMI
            .word Reset          ; RESET
            .word Reset          ; IRQ
            
    	    END
